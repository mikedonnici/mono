// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package redisdatav1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RedisDataServiceClient is the client API for RedisDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RedisDataServiceClient interface {
	FetchData(ctx context.Context, in *FetchDataRequest, opts ...grpc.CallOption) (*FetchDataResponse, error)
}

type redisDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRedisDataServiceClient(cc grpc.ClientConnInterface) RedisDataServiceClient {
	return &redisDataServiceClient{cc}
}

func (c *redisDataServiceClient) FetchData(ctx context.Context, in *FetchDataRequest, opts ...grpc.CallOption) (*FetchDataResponse, error) {
	out := new(FetchDataResponse)
	err := c.cc.Invoke(ctx, "/redisdata.v1.RedisDataService/FetchData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RedisDataServiceServer is the server API for RedisDataService service.
// All implementations should embed UnimplementedRedisDataServiceServer
// for forward compatibility
type RedisDataServiceServer interface {
	FetchData(context.Context, *FetchDataRequest) (*FetchDataResponse, error)
}

// UnimplementedRedisDataServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRedisDataServiceServer struct {
}

func (UnimplementedRedisDataServiceServer) FetchData(context.Context, *FetchDataRequest) (*FetchDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchData not implemented")
}

// UnsafeRedisDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RedisDataServiceServer will
// result in compilation errors.
type UnsafeRedisDataServiceServer interface {
	mustEmbedUnimplementedRedisDataServiceServer()
}

func RegisterRedisDataServiceServer(s grpc.ServiceRegistrar, srv RedisDataServiceServer) {
	s.RegisterService(&RedisDataService_ServiceDesc, srv)
}

func _RedisDataService_FetchData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisDataServiceServer).FetchData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/redisdata.v1.RedisDataService/FetchData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisDataServiceServer).FetchData(ctx, req.(*FetchDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RedisDataService_ServiceDesc is the grpc.ServiceDesc for RedisDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RedisDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "redisdata.v1.RedisDataService",
	HandlerType: (*RedisDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchData",
			Handler:    _RedisDataService_FetchData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "redisdata/v1/redisdata.proto",
}
